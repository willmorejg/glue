plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'com.diffplug.spotless' version '6.19.0'
	id 'org.ysb33r.doxygen' version '0.7.0'
	id 'jacoco'
	id 'project-report'
	id 'build-dashboard'
}

group = 'net.ljcomputing'
version = '0.0.1-SNAPSHOT'

ext {
	camelVersion = "4.1.0"
	testcontainersVersion = "1.19.1"
}

java {
	sourceCompatibility = '17'
	withJavadocJar()
	withSourcesJar()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	maven {
		url = uri('http://localhost:8081/repository/maven-central/')
		allowInsecureProtocol = true
	}

	maven {
		url = uri('http://localhost:8081/repository/repo.spring.io-milestone/')
		allowInsecureProtocol = true
	}

	mavenLocal()
}

dependencyManagement {
	applyMavenExclusions = false

	imports {
		mavenBom "org.apache.camel.springboot:camel-spring-boot-bom:${camelVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-artemis'

	implementation 'org.apache.camel.springboot:camel-spring-boot-starter'
	implementation 'org.apache.camel.springboot:camel-log-starter'
	implementation 'org.apache.camel.springboot:camel-servlet-starter'
	implementation 'org.apache.camel.springboot:camel-rest-starter'
	implementation 'org.apache.camel.springboot:camel-openapi-java-starter'
	implementation 'org.apache.camel.springboot:camel-jackson-starter'
	implementation 'org.apache.camel.springboot:camel-kafka-starter'
	implementation 'org.apache.camel.springboot:camel-jms-starter'
	implementation 'org.apache.camel.springboot:camel-activemq-starter'

	implementation 'org.apache.camel:camel-support'

	implementation 'org.apache.activemq:artemis-jms-client:2.31.2'

	implementation 'org.messaginghub:pooled-jms:3.1.4'

	implementation 'org.webjars:swagger-ui:5.9.0'
	implementation 'org.webjars:webjars-locator:0.48'

	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.15.3'
	implementation 'javax.xml.bind:jaxb-api:2.3.1'

	runtimeOnly 'org.postgresql:postgresql:42.6.0'

	compileOnly 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.apache.camel:camel-test-spring-junit5'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
}

tasks.withType(JavaCompile) {
	dependsOn spotlessApply
	options.encoding = 'UTF-8'
}

bootJar {
	setDuplicatesStrategy(DuplicatesStrategy.WARN)
}

bootRun {
	classpath = sourceSets.main.runtimeClasspath
}

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}

	manifest {
		attributes (
				'Main-Class': 'net.ljcomputing.glue.GlueApplication',
				'Implementation-Title': 'Glue',
				'Implementation-Version': version
				)
	}
}

spotless {
	java {
		targetExclude("build/**")
		licenseHeaderFile("$rootProject.projectDir/configuration/spotless/license-header.java").updateYearWithLatest(true)
		toggleOffOn()
		trimTrailingWhitespace()
		endWithNewline()
		removeUnusedImports()
		importOrder('java', 'javax', '', '\\#')
		googleJavaFormat('1.15.0').aosp().reflowLongStrings().groupArtifact('com.google.googlejavaformat:google-java-format')
	}
	groovyGradle {
		target '*.gradle'
		greclipse()
	}
}

javadoc {
	exclude("build/generated/sources/**/*.java")
	options.memberLevel = JavadocMemberLevel.PRIVATE
	failOnError(false)
}

doxygen {
	source new File(projectDir, 'src/main/java')
	project_name 'Glue'
	optimize_output_java true
	javadoc_autobrief true
	extract_private true
	extract_static true
	generate_rtf true
	generate_latex true
	generate_html true
	generate_treeview true
	treeview_width 100
}

test {
	testLogging.showStandardStreams = true
	finalizedBy jacocoTestReport
	useJUnitPlatform()

	jacoco {
		excludes = ['**$Handler']
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 1.0
			}
		}
	}
}

tasks.named("bootBuildImage") {
	imageName = "example.com/library/${project.name}:${project.version}"
	publish = false
}

